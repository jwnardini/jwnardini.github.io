{"version":3,"sources":["burrito-quest2/tests/adapters/application.jshint.js","burrito-quest2/tests/app.jshint.js","burrito-quest2/tests/components/inventory-display.jshint.js","burrito-quest2/tests/components/kegstand-1.jshint.js","burrito-quest2/tests/components/start-screen.jshint.js","burrito-quest2/tests/components/talk-to-steve.jshint.js","burrito-quest2/tests/helpers/create-offline-ref.js","burrito-quest2/tests/helpers/destroy-app.js","burrito-quest2/tests/helpers/destroy-app.jshint.js","burrito-quest2/tests/helpers/module-for-acceptance.js","burrito-quest2/tests/helpers/module-for-acceptance.jshint.js","burrito-quest2/tests/helpers/replace-app-ref.js","burrito-quest2/tests/helpers/resolver.js","burrito-quest2/tests/helpers/resolver.jshint.js","burrito-quest2/tests/helpers/start-app.js","burrito-quest2/tests/helpers/start-app.jshint.js","burrito-quest2/tests/helpers/stub-firebase.js","burrito-quest2/tests/helpers/unstub-firebase.js","burrito-quest2/tests/integration/components/inventory-display-test.js","burrito-quest2/tests/integration/components/inventory-display-test.jshint.js","burrito-quest2/tests/integration/components/kegstand-1-test.js","burrito-quest2/tests/integration/components/kegstand-1-test.jshint.js","burrito-quest2/tests/integration/components/start-screen-test.js","burrito-quest2/tests/integration/components/start-screen-test.jshint.js","burrito-quest2/tests/integration/components/talk-to-steve-test.js","burrito-quest2/tests/integration/components/talk-to-steve-test.jshint.js","burrito-quest2/tests/models/game.jshint.js","burrito-quest2/tests/models/item.jshint.js","burrito-quest2/tests/resolver.jshint.js","burrito-quest2/tests/router.jshint.js","burrito-quest2/tests/routes/approach-randy-backyard.jshint.js","burrito-quest2/tests/routes/ask-about-randy1.jshint.js","burrito-quest2/tests/routes/ask-about-randy2.jshint.js","burrito-quest2/tests/routes/ask-about-randy3.jshint.js","burrito-quest2/tests/routes/ask-for-drugs.jshint.js","burrito-quest2/tests/routes/ask-for-wallet.jshint.js","burrito-quest2/tests/routes/bribe-kid.jshint.js","burrito-quest2/tests/routes/do-28-seconds.jshint.js","burrito-quest2/tests/routes/do-29-seconds.jshint.js","burrito-quest2/tests/routes/do-kegstand-til-death.jshint.js","burrito-quest2/tests/routes/enter-hospital-death.jshint.js","burrito-quest2/tests/routes/enter-hospital.jshint.js","burrito-quest2/tests/routes/follow-randy-on-foot.jshint.js","burrito-quest2/tests/routes/gurney-distract-magic-eye.jshint.js","burrito-quest2/tests/routes/gurney-distract-trophy.jshint.js","burrito-quest2/tests/routes/gurney-run-for-it.jshint.js","burrito-quest2/tests/routes/gurney-trophy.jshint.js","burrito-quest2/tests/routes/gurney.jshint.js","burrito-quest2/tests/routes/index.jshint.js","burrito-quest2/tests/routes/kegstand.jshint.js","burrito-quest2/tests/routes/mimic-bro-voice.jshint.js","burrito-quest2/tests/routes/party.jshint.js","burrito-quest2/tests/routes/peek-from-microwave.jshint.js","burrito-quest2/tests/routes/question-one-right.jshint.js","burrito-quest2/tests/routes/question-three-right.jshint.js","burrito-quest2/tests/routes/question-two-right.jshint.js","burrito-quest2/tests/routes/question-wrong.jshint.js","burrito-quest2/tests/routes/room-drugs-death.jshint.js","burrito-quest2/tests/routes/room-drugs-slingshot.jshint.js","burrito-quest2/tests/routes/room-no-items-death.jshint.js","burrito-quest2/tests/routes/room-slingshot-death.jshint.js","burrito-quest2/tests/routes/room-trophy.jshint.js","burrito-quest2/tests/routes/show-friend-magic-eye.jshint.js","burrito-quest2/tests/routes/steal-bike-death.jshint.js","burrito-quest2/tests/routes/steal-cops-gun-death.jshint.js","burrito-quest2/tests/routes/take-drugs-death.jshint.js","burrito-quest2/tests/routes/talk-to-steve.jshint.js","burrito-quest2/tests/routes/wheelchair-distract-magic-eye.jshint.js","burrito-quest2/tests/routes/wheelchair-distract-trophy.jshint.js","burrito-quest2/tests/routes/wheelchair-run-for-it-trophy.jshint.js","burrito-quest2/tests/routes/wheelchair-run-for-it.jshint.js","burrito-quest2/tests/routes/wheelchair-trophy.jshint.js","burrito-quest2/tests/routes/wheelchair.jshint.js","burrito-quest2/tests/services/inventory.jshint.js","burrito-quest2/tests/test-helper.js","burrito-quest2/tests/test-helper.jshint.js","burrito-quest2/tests/unit/models/game-test.js","burrito-quest2/tests/unit/models/game-test.jshint.js","burrito-quest2/tests/unit/models/item-test.js","burrito-quest2/tests/unit/models/item-test.jshint.js","burrito-quest2/tests/unit/routes/approach-randy-backyard-test.js","burrito-quest2/tests/unit/routes/approach-randy-backyard-test.jshint.js","burrito-quest2/tests/unit/routes/ask-about-randy1-test.js","burrito-quest2/tests/unit/routes/ask-about-randy1-test.jshint.js","burrito-quest2/tests/unit/routes/ask-about-randy2-test.js","burrito-quest2/tests/unit/routes/ask-about-randy2-test.jshint.js","burrito-quest2/tests/unit/routes/ask-about-randy3-test.js","burrito-quest2/tests/unit/routes/ask-about-randy3-test.jshint.js","burrito-quest2/tests/unit/routes/ask-for-drugs-test.js","burrito-quest2/tests/unit/routes/ask-for-drugs-test.jshint.js","burrito-quest2/tests/unit/routes/ask-for-wallet-test.js","burrito-quest2/tests/unit/routes/ask-for-wallet-test.jshint.js","burrito-quest2/tests/unit/routes/bribe-kid-test.js","burrito-quest2/tests/unit/routes/bribe-kid-test.jshint.js","burrito-quest2/tests/unit/routes/do-28-seconds-test.js","burrito-quest2/tests/unit/routes/do-28-seconds-test.jshint.js","burrito-quest2/tests/unit/routes/do-29-seconds-test.js","burrito-quest2/tests/unit/routes/do-29-seconds-test.jshint.js","burrito-quest2/tests/unit/routes/do-kegstand-til-death-test.js","burrito-quest2/tests/unit/routes/do-kegstand-til-death-test.jshint.js","burrito-quest2/tests/unit/routes/enter-hospital-death-test.js","burrito-quest2/tests/unit/routes/enter-hospital-death-test.jshint.js","burrito-quest2/tests/unit/routes/enter-hospital-test.js","burrito-quest2/tests/unit/routes/enter-hospital-test.jshint.js","burrito-quest2/tests/unit/routes/follow-randy-on-foot-test.js","burrito-quest2/tests/unit/routes/follow-randy-on-foot-test.jshint.js","burrito-quest2/tests/unit/routes/gurney-distract-magic-eye-test.js","burrito-quest2/tests/unit/routes/gurney-distract-magic-eye-test.jshint.js","burrito-quest2/tests/unit/routes/gurney-distract-trophy-test.js","burrito-quest2/tests/unit/routes/gurney-distract-trophy-test.jshint.js","burrito-quest2/tests/unit/routes/gurney-run-for-it-test.js","burrito-quest2/tests/unit/routes/gurney-run-for-it-test.jshint.js","burrito-quest2/tests/unit/routes/gurney-test.js","burrito-quest2/tests/unit/routes/gurney-test.jshint.js","burrito-quest2/tests/unit/routes/gurney-trophy-test.js","burrito-quest2/tests/unit/routes/gurney-trophy-test.jshint.js","burrito-quest2/tests/unit/routes/hospital-test.js","burrito-quest2/tests/unit/routes/hospital-test.jshint.js","burrito-quest2/tests/unit/routes/house-test.js","burrito-quest2/tests/unit/routes/house-test.jshint.js","burrito-quest2/tests/unit/routes/index-test.js","burrito-quest2/tests/unit/routes/index-test.jshint.js","burrito-quest2/tests/unit/routes/kegstand-test.js","burrito-quest2/tests/unit/routes/kegstand-test.jshint.js","burrito-quest2/tests/unit/routes/mimic-bro-voice-test.js","burrito-quest2/tests/unit/routes/mimic-bro-voice-test.jshint.js","burrito-quest2/tests/unit/routes/party-test.js","burrito-quest2/tests/unit/routes/party-test.jshint.js","burrito-quest2/tests/unit/routes/peek-from-microwave-test.js","burrito-quest2/tests/unit/routes/peek-from-microwave-test.jshint.js","burrito-quest2/tests/unit/routes/question-one-right-test.js","burrito-quest2/tests/unit/routes/question-one-right-test.jshint.js","burrito-quest2/tests/unit/routes/question-three-right-test.js","burrito-quest2/tests/unit/routes/question-three-right-test.jshint.js","burrito-quest2/tests/unit/routes/question-two-right-test.js","burrito-quest2/tests/unit/routes/question-two-right-test.jshint.js","burrito-quest2/tests/unit/routes/question-wrong-test.js","burrito-quest2/tests/unit/routes/question-wrong-test.jshint.js","burrito-quest2/tests/unit/routes/room-drugs-death-test.js","burrito-quest2/tests/unit/routes/room-drugs-death-test.jshint.js","burrito-quest2/tests/unit/routes/room-drugs-slingshot-test.js","burrito-quest2/tests/unit/routes/room-drugs-slingshot-test.jshint.js","burrito-quest2/tests/unit/routes/room-no-items-death-test.js","burrito-quest2/tests/unit/routes/room-no-items-death-test.jshint.js","burrito-quest2/tests/unit/routes/room-slingshot-death-test.js","burrito-quest2/tests/unit/routes/room-slingshot-death-test.jshint.js","burrito-quest2/tests/unit/routes/room-trophy-test.js","burrito-quest2/tests/unit/routes/room-trophy-test.jshint.js","burrito-quest2/tests/unit/routes/show-friend-magic-eye-test.js","burrito-quest2/tests/unit/routes/show-friend-magic-eye-test.jshint.js","burrito-quest2/tests/unit/routes/steal-bike-death-test.js","burrito-quest2/tests/unit/routes/steal-bike-death-test.jshint.js","burrito-quest2/tests/unit/routes/steal-cops-gun-death-test.js","burrito-quest2/tests/unit/routes/steal-cops-gun-death-test.jshint.js","burrito-quest2/tests/unit/routes/take-drugs-death-test.js","burrito-quest2/tests/unit/routes/take-drugs-death-test.jshint.js","burrito-quest2/tests/unit/routes/take-magic-eye-test.js","burrito-quest2/tests/unit/routes/take-magic-eye-test.jshint.js","burrito-quest2/tests/unit/routes/take-sunglasses-test.js","burrito-quest2/tests/unit/routes/take-sunglasses-test.jshint.js","burrito-quest2/tests/unit/routes/talk-to-steve-test.js","burrito-quest2/tests/unit/routes/talk-to-steve-test.jshint.js","burrito-quest2/tests/unit/routes/wheelchair-distract-magic-eye-test.js","burrito-quest2/tests/unit/routes/wheelchair-distract-magic-eye-test.jshint.js","burrito-quest2/tests/unit/routes/wheelchair-distract-trophy-test.js","burrito-quest2/tests/unit/routes/wheelchair-distract-trophy-test.jshint.js","burrito-quest2/tests/unit/routes/wheelchair-run-for-it-test.js","burrito-quest2/tests/unit/routes/wheelchair-run-for-it-test.jshint.js","burrito-quest2/tests/unit/routes/wheelchair-run-for-it-trophy-test.js","burrito-quest2/tests/unit/routes/wheelchair-run-for-it-trophy-test.jshint.js","burrito-quest2/tests/unit/routes/wheelchair-test.js","burrito-quest2/tests/unit/routes/wheelchair-test.jshint.js","burrito-quest2/tests/unit/routes/wheelchair-trophy-test.js","burrito-quest2/tests/unit/routes/wheelchair-trophy-test.jshint.js","burrito-quest2/tests/unit/services/inventory-test.js","burrito-quest2/tests/unit/services/inventory-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('burrito-quest2/tests/adapters/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - adapters/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/components/inventory-display.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/inventory-display.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/inventory-display.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/components/kegstand-1.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/kegstand-1.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/kegstand-1.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/components/start-screen.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/start-screen.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/start-screen.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/components/talk-to-steve.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/talk-to-steve.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/talk-to-steve.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/helpers/create-offline-ref', ['exports', 'firebase'], function (exports, _firebase) {\n  exports['default'] = createOfflineRef;\n\n  /**\n   * Creates an offline Firebase reference with optional initial data and url.\n   *\n   * Be sure to `stubFirebase()` and `unstubFirebase()` in your tests!\n   *\n   * @param  {Object} [initialData]\n   * @param  {String} [url]\n   * @return {Firebase}\n   */\n\n  function createOfflineRef(initialData) {\n    var url = arguments.length <= 1 || arguments[1] === undefined ? 'https://emberfire-tests.firebaseio.com' : arguments[1];\n\n    if (!_firebase['default']._unStub) {\n      throw new Error('Please use stubFirebase() before calling this method');\n    }\n\n    var ref = new _firebase['default'](url);\n    _firebase['default'].goOffline(); // must be called after the ref is created\n\n    if (initialData) {\n      ref.set(initialData);\n    }\n\n    return ref;\n  }\n});","define('burrito-quest2/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('burrito-quest2/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'burrito-quest2/tests/helpers/start-app', 'burrito-quest2/tests/helpers/destroy-app'], function (exports, _qunit, _burritoQuest2TestsHelpersStartApp, _burritoQuest2TestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _burritoQuest2TestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n\n        (0, _burritoQuest2TestsHelpersDestroyApp['default'])(this.application);\n      }\n    });\n  };\n});","define('burrito-quest2/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/helpers/replace-app-ref', ['exports'], function (exports) {\n  exports['default'] = replaceAppRef;\n  /**\n   * Updates the supplied app adapter's Firebase reference.\n   *\n   * @param  {Ember.Application} app\n   * @param  {Firebase} ref\n   * @param  {String} [model]  The model, if overriding a model specific adapter\n   */\n\n  function replaceAppRef(app, ref) {\n    var model = arguments.length <= 2 || arguments[2] === undefined ? 'application' : arguments[2];\n\n    var store = app.__container__.lookup('service:store');\n    var adapter = store.adapterFor(model);\n\n    adapter._ref = ref;\n    adapter._queueFlushDelay = false;\n  }\n});","define('burrito-quest2/tests/helpers/resolver', ['exports', 'burrito-quest2/resolver', 'burrito-quest2/config/environment'], function (exports, _burritoQuest2Resolver, _burritoQuest2ConfigEnvironment) {\n\n  var resolver = _burritoQuest2Resolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _burritoQuest2ConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _burritoQuest2ConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('burrito-quest2/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/helpers/start-app', ['exports', 'ember', 'burrito-quest2/app', 'burrito-quest2/config/environment'], function (exports, _ember, _burritoQuest2App, _burritoQuest2ConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _burritoQuest2ConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _burritoQuest2App['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('burrito-quest2/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/helpers/stub-firebase', ['exports', 'firebase'], function (exports, _firebase) {\n  exports['default'] = stubFirebase;\n\n  /**\n   * When a reference is in offline mode it will not call any callbacks\n   * until it goes online and resyncs. The ref will have already\n   * updated its internal cache with the changed values so we shortcut\n   * the process and call the supplied callbacks immediately (asynchronously).\n   */\n\n  function stubFirebase() {\n\n    // check for existing stubbing\n    if (!_firebase['default']._unStub) {\n\n      var originalSet = _firebase['default'].prototype.set;\n      var originalUpdate = _firebase['default'].prototype.update;\n      var originalRemove = _firebase['default'].prototype.remove;\n\n      _firebase['default']._unStub = function () {\n        _firebase['default'].prototype.set = originalSet;\n        _firebase['default'].prototype.update = originalUpdate;\n        _firebase['default'].prototype.remove = originalRemove;\n      };\n\n      _firebase['default'].prototype.set = function (data, cb) {\n        originalSet.call(this, data);\n        if (typeof cb === 'function') {\n          setTimeout(cb, 0);\n        }\n      };\n\n      _firebase['default'].prototype.update = function (data, cb) {\n        originalUpdate.call(this, data);\n        if (typeof cb === 'function') {\n          setTimeout(cb, 0);\n        }\n      };\n\n      _firebase['default'].prototype.remove = function (cb) {\n        originalRemove.call(this);\n        if (typeof cb === 'function') {\n          setTimeout(cb, 0);\n        }\n      };\n    }\n  }\n});","define('burrito-quest2/tests/helpers/unstub-firebase', ['exports', 'firebase'], function (exports, _firebase) {\n  exports['default'] = unstubFirebase;\n\n  function unstubFirebase() {\n    if (typeof _firebase['default']._unStub === 'function') {\n      _firebase['default']._unStub();\n      delete _firebase['default']._unStub;\n    }\n  }\n});","define('burrito-quest2/tests/integration/components/inventory-display-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('inventory-display', 'Integration | Component | inventory display', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.5',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 21\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'inventory-display', ['loc', [null, [1, 0], [1, 21]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.5',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.5',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'inventory-display', [], [], 0, null, ['loc', [null, [2, 4], [4, 26]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('burrito-quest2/tests/integration/components/inventory-display-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/inventory-display-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/inventory-display-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/integration/components/kegstand-1-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('kegstand-1', 'Integration | Component | kegstand 1', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.5',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 14\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'kegstand-1', ['loc', [null, [1, 0], [1, 14]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.5',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.5',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'kegstand-1', [], [], 0, null, ['loc', [null, [2, 4], [4, 19]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('burrito-quest2/tests/integration/components/kegstand-1-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/kegstand-1-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/kegstand-1-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/integration/components/start-screen-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('start-screen', 'Integration | Component | start screen', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.5',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 16\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'start-screen', ['loc', [null, [1, 0], [1, 16]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.5',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.5',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'start-screen', [], [], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('burrito-quest2/tests/integration/components/start-screen-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/start-screen-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/start-screen-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/integration/components/talk-to-steve-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('talk-to-steve', 'Integration | Component | talk to steve', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.5',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 17\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'talk-to-steve', ['loc', [null, [1, 0], [1, 17]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.5',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.5',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'talk-to-steve', [], [], 0, null, ['loc', [null, [2, 4], [4, 22]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('burrito-quest2/tests/integration/components/talk-to-steve-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/talk-to-steve-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/talk-to-steve-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/models/game.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/game.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/game.js should pass jshint.\\nmodels/game.js: line 4, col 16, \\'DS\\' is not defined.\\nmodels/game.js: line 5, col 16, \\'DS\\' is not defined.\\nmodels/game.js: line 6, col 15, \\'DS\\' is not defined.\\nmodels/game.js: line 7, col 16, \\'DS\\' is not defined.\\nmodels/game.js: line 8, col 19, \\'DS\\' is not defined.\\nmodels/game.js: line 9, col 17, \\'DS\\' is not defined.\\nmodels/game.js: line 10, col 17, \\'DS\\' is not defined.\\nmodels/game.js: line 11, col 13, \\'DS\\' is not defined.\\nmodels/game.js: line 12, col 16, \\'DS\\' is not defined.\\n\\n9 errors');\n  });\n});","define('burrito-quest2/tests/models/item.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/item.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/item.js should pass jshint.\\nmodels/item.js: line 4, col 9, \\'DS\\' is not defined.\\nmodels/item.js: line 5, col 9, \\'DS\\' is not defined.\\nmodels/item.js: line 6, col 10, \\'DS\\' is not defined.\\n\\n3 errors');\n  });\n});","define('burrito-quest2/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/approach-randy-backyard.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/approach-randy-backyard.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/approach-randy-backyard.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/ask-about-randy1.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ask-about-randy1.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ask-about-randy1.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/ask-about-randy2.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ask-about-randy2.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ask-about-randy2.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/ask-about-randy3.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ask-about-randy3.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ask-about-randy3.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/ask-for-drugs.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ask-for-drugs.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ask-for-drugs.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/ask-for-wallet.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ask-for-wallet.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ask-for-wallet.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/bribe-kid.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/bribe-kid.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/bribe-kid.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/do-28-seconds.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/do-28-seconds.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/do-28-seconds.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/do-29-seconds.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/do-29-seconds.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/do-29-seconds.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/do-kegstand-til-death.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/do-kegstand-til-death.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/do-kegstand-til-death.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/enter-hospital-death.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/enter-hospital-death.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/enter-hospital-death.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/enter-hospital.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/enter-hospital.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/enter-hospital.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/follow-randy-on-foot.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/follow-randy-on-foot.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/follow-randy-on-foot.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/gurney-distract-magic-eye.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/gurney-distract-magic-eye.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/gurney-distract-magic-eye.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/gurney-distract-trophy.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/gurney-distract-trophy.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/gurney-distract-trophy.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/gurney-run-for-it.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/gurney-run-for-it.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/gurney-run-for-it.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/gurney-trophy.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/gurney-trophy.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/gurney-trophy.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/gurney.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/gurney.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/gurney.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/kegstand.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/kegstand.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/kegstand.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/mimic-bro-voice.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/mimic-bro-voice.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/mimic-bro-voice.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/party.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/party.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/party.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/peek-from-microwave.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/peek-from-microwave.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/peek-from-microwave.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/question-one-right.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/question-one-right.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/question-one-right.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/question-three-right.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/question-three-right.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/question-three-right.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/question-two-right.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/question-two-right.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/question-two-right.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/question-wrong.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/question-wrong.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/question-wrong.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/room-drugs-death.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/room-drugs-death.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/room-drugs-death.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/room-drugs-slingshot.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/room-drugs-slingshot.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/room-drugs-slingshot.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/room-no-items-death.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/room-no-items-death.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/room-no-items-death.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/room-slingshot-death.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/room-slingshot-death.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/room-slingshot-death.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/room-trophy.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/room-trophy.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/room-trophy.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/show-friend-magic-eye.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/show-friend-magic-eye.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/show-friend-magic-eye.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/steal-bike-death.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/steal-bike-death.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/steal-bike-death.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/steal-cops-gun-death.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/steal-cops-gun-death.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/steal-cops-gun-death.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/take-drugs-death.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/take-drugs-death.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/take-drugs-death.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/talk-to-steve.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/talk-to-steve.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/talk-to-steve.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/wheelchair-distract-magic-eye.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/wheelchair-distract-magic-eye.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/wheelchair-distract-magic-eye.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/wheelchair-distract-trophy.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/wheelchair-distract-trophy.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/wheelchair-distract-trophy.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/wheelchair-run-for-it-trophy.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/wheelchair-run-for-it-trophy.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/wheelchair-run-for-it-trophy.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/wheelchair-run-for-it.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/wheelchair-run-for-it.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/wheelchair-run-for-it.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/wheelchair-trophy.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/wheelchair-trophy.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/wheelchair-trophy.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/routes/wheelchair.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/wheelchair.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/wheelchair.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/services/inventory.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - services/inventory.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/inventory.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/test-helper', ['exports', 'burrito-quest2/tests/helpers/resolver', 'ember-qunit'], function (exports, _burritoQuest2TestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_burritoQuest2TestsHelpersResolver['default']);\n});","define('burrito-quest2/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/models/game-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('game', 'Unit | Model | game', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('burrito-quest2/tests/unit/models/game-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models/game-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/game-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/models/item-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('item', 'Unit | Model | item', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('burrito-quest2/tests/unit/models/item-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models/item-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/item-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/approach-randy-backyard-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:approach-randy-backyard', 'Unit | Route | approach randy backyard', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/approach-randy-backyard-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/approach-randy-backyard-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/approach-randy-backyard-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/ask-about-randy1-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:ask-about-randy1', 'Unit | Route | ask about randy1', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/ask-about-randy1-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/ask-about-randy1-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/ask-about-randy1-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/ask-about-randy2-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:ask-about-randy2', 'Unit | Route | ask about randy2', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/ask-about-randy2-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/ask-about-randy2-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/ask-about-randy2-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/ask-about-randy3-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:ask-about-randy3', 'Unit | Route | ask about randy3', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/ask-about-randy3-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/ask-about-randy3-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/ask-about-randy3-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/ask-for-drugs-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:ask-for-drugs', 'Unit | Route | ask for drugs', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/ask-for-drugs-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/ask-for-drugs-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/ask-for-drugs-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/ask-for-wallet-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:ask-for-wallet', 'Unit | Route | ask for wallet', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/ask-for-wallet-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/ask-for-wallet-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/ask-for-wallet-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/bribe-kid-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:bribe-kid', 'Unit | Route | bribe kid', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/bribe-kid-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/bribe-kid-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/bribe-kid-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/do-28-seconds-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:do-28-seconds', 'Unit | Route | do 28 seconds', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/do-28-seconds-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/do-28-seconds-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/do-28-seconds-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/do-29-seconds-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:do-29-seconds', 'Unit | Route | do 29 seconds', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/do-29-seconds-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/do-29-seconds-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/do-29-seconds-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/do-kegstand-til-death-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:do-kegstand-til-death', 'Unit | Route | do kegstand til death', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/do-kegstand-til-death-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/do-kegstand-til-death-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/do-kegstand-til-death-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/enter-hospital-death-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:enter-hospital-death', 'Unit | Route | enter hospital death', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/enter-hospital-death-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/enter-hospital-death-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/enter-hospital-death-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/enter-hospital-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:enter-hospital', 'Unit | Route | enter hospital', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/enter-hospital-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/enter-hospital-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/enter-hospital-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/follow-randy-on-foot-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:follow-randy-on-foot', 'Unit | Route | follow randy on foot', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/follow-randy-on-foot-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/follow-randy-on-foot-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/follow-randy-on-foot-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/gurney-distract-magic-eye-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:gurney-distract-magic-eye', 'Unit | Route | gurney distract magic eye', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/gurney-distract-magic-eye-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/gurney-distract-magic-eye-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/gurney-distract-magic-eye-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/gurney-distract-trophy-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:gurney-distract-trophy', 'Unit | Route | gurney distract trophy', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/gurney-distract-trophy-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/gurney-distract-trophy-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/gurney-distract-trophy-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/gurney-run-for-it-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:gurney-run-for-it', 'Unit | Route | gurney run for it', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/gurney-run-for-it-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/gurney-run-for-it-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/gurney-run-for-it-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/gurney-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:gurney', 'Unit | Route | gurney', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/gurney-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/gurney-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/gurney-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/gurney-trophy-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:gurney-trophy', 'Unit | Route | gurney trophy', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/gurney-trophy-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/gurney-trophy-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/gurney-trophy-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/hospital-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:hospital', 'Unit | Route | hospital', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/hospital-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/hospital-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/hospital-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/house-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:house', 'Unit | Route | house', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/house-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/house-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/house-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/index-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/kegstand-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:kegstand', 'Unit | Route | kegstand', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/kegstand-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/kegstand-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/kegstand-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/mimic-bro-voice-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:mimic-bro-voice', 'Unit | Route | mimic bro voice', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/mimic-bro-voice-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/mimic-bro-voice-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/mimic-bro-voice-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/party-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:party', 'Unit | Route | party', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/party-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/party-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/party-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/peek-from-microwave-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:peek-from-microwave', 'Unit | Route | peek from microwave', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/peek-from-microwave-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/peek-from-microwave-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/peek-from-microwave-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/question-one-right-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:question-one-right', 'Unit | Route | question one right', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/question-one-right-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/question-one-right-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/question-one-right-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/question-three-right-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:question-three-right', 'Unit | Route | question three right', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/question-three-right-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/question-three-right-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/question-three-right-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/question-two-right-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:question-two-right', 'Unit | Route | question two right', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/question-two-right-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/question-two-right-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/question-two-right-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/question-wrong-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:question-wrong', 'Unit | Route | question wrong', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/question-wrong-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/question-wrong-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/question-wrong-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/room-drugs-death-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:room-drugs-death', 'Unit | Route | room drugs death', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/room-drugs-death-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/room-drugs-death-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/room-drugs-death-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/room-drugs-slingshot-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:room-drugs-slingshot', 'Unit | Route | room drugs slingshot', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/room-drugs-slingshot-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/room-drugs-slingshot-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/room-drugs-slingshot-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/room-no-items-death-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:room-no-items-death', 'Unit | Route | room no items death', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/room-no-items-death-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/room-no-items-death-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/room-no-items-death-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/room-slingshot-death-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:room-slingshot-death', 'Unit | Route | room slingshot death', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/room-slingshot-death-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/room-slingshot-death-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/room-slingshot-death-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/room-trophy-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:room-trophy', 'Unit | Route | room trophy', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/room-trophy-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/room-trophy-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/room-trophy-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/show-friend-magic-eye-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:show-friend-magic-eye', 'Unit | Route | show friend magic eye', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/show-friend-magic-eye-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/show-friend-magic-eye-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/show-friend-magic-eye-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/steal-bike-death-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:steal-bike-death', 'Unit | Route | steal bike death', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/steal-bike-death-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/steal-bike-death-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/steal-bike-death-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/steal-cops-gun-death-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:steal-cops-gun-death', 'Unit | Route | steal cops gun death', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/steal-cops-gun-death-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/steal-cops-gun-death-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/steal-cops-gun-death-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/take-drugs-death-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:take-drugs-death', 'Unit | Route | take drugs death', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/take-drugs-death-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/take-drugs-death-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/take-drugs-death-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/take-magic-eye-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:take-magic-eye', 'Unit | Route | take magic eye', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/take-magic-eye-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/take-magic-eye-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/take-magic-eye-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/take-sunglasses-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:take-sunglasses', 'Unit | Route | take sunglasses', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/take-sunglasses-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/take-sunglasses-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/take-sunglasses-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/talk-to-steve-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:talk-to-steve', 'Unit | Route | talk to steve', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/talk-to-steve-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/talk-to-steve-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/talk-to-steve-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/wheelchair-distract-magic-eye-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:wheelchair-distract-magic-eye', 'Unit | Route | wheelchair distract magic eye', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/wheelchair-distract-magic-eye-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/wheelchair-distract-magic-eye-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/wheelchair-distract-magic-eye-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/wheelchair-distract-trophy-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:wheelchair-distract-trophy', 'Unit | Route | wheelchair distract trophy', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/wheelchair-distract-trophy-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/wheelchair-distract-trophy-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/wheelchair-distract-trophy-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/wheelchair-run-for-it-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:wheelchair-run-for-it', 'Unit | Route | wheelchair run for it', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/wheelchair-run-for-it-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/wheelchair-run-for-it-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/wheelchair-run-for-it-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/wheelchair-run-for-it-trophy-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:wheelchair-run-for-it-trophy', 'Unit | Route | wheelchair run for it trophy', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/wheelchair-run-for-it-trophy-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/wheelchair-run-for-it-trophy-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/wheelchair-run-for-it-trophy-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/wheelchair-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:wheelchair', 'Unit | Route | wheelchair', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/wheelchair-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/wheelchair-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/wheelchair-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/routes/wheelchair-trophy-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:wheelchair-trophy', 'Unit | Route | wheelchair trophy', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('burrito-quest2/tests/unit/routes/wheelchair-trophy-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/wheelchair-trophy-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/wheelchair-trophy-test.js should pass jshint.');\n  });\n});","define('burrito-quest2/tests/unit/services/inventory-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:inventory', 'Unit | Service | inventory', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('burrito-quest2/tests/unit/services/inventory-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/services/inventory-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/inventory-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('burrito-quest2/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}